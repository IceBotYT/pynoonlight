name: Test

on:
  pull_request:
  push:
    branches:
      - "**"

jobs:
  changes:
    runs-on: ubuntu-latest
    name: Gather changed files
    outputs:
      run_tests: ${{ steps.changes.outputs.run_tests }}
      run_actionlint: ${{ steps.changes.outputs.run_actionlint }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout code from the repo
        with:
          fetch-depth: 0
          submodules: true

      - name: Get changed files
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            run_tests:
              - 'src/**'
              - 'tests/**'
            run_actionlint:
              - '.github/workflows/**'

  actionlint:
    name: Check workflow files
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.run_actionlint == 'true' }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout code from the repo
      - name: Download actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        shell: bash
      - name: Check workflow files
        run: ./actionlint -color
        shell: bash

  lint-cruft:
    name: Check if automatic project update was successful
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout code from the repo
      - name: Fail if .rej files exist as structure update was not successful
        run: test -z "$(find . -iname '*.rej')"

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout code from the repo
      - uses: ./.github/actions/python-poetry-env
        name: Setup Python + Poetry
      - run: poetry run pre-commit run --all-files
        name: Run pre-commit

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    needs:
      - changes
      - lint-cruft
      - pre-commit
    if: ${{ always() && needs.changes.outputs.run_tests == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/python-poetry-env
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run tests and collect coverage
        run: poetry run pytest --cov=pynoonlight --cov-report=xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  coverage:
    name: Upload test coverage to Codecov
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v2
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v3
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
