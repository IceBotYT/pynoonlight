{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynoonlight","text":"<p>Documentation: https://IceBotYT.github.io/pynoonlight</p> <p>Source Code: https://github.com/IceBotYT/pynoonlight</p> <p>PyPI: https://pypi.org/project/pynoonlight/</p> <p>Create and update alarms for Noonlight</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pynoonlight\n</code></pre>"},{"location":"#development","title":"Development","text":"<ul> <li>Clone this repository</li> <li>Requirements:</li> <li>Poetry</li> <li> <p>Python 3.10</p> </li> <li> <p>Setup virtual environments</p> </li> </ul> <p>This will modify your <code>.bashrc</code> file to create two new aliases to point to the virtual environments. The two new aliases are: - noonlight_python3.10</p> <pre><code>cd pynoonlight\nchmod +x setup_virtual_environments.sh\n./setup_virtual_environments.sh\n</code></pre> <ul> <li>Activate the virtual environment (Python 3.10)</li> </ul> <pre><code>noonlight_python3.10\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>pytest\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is automatically generated from the content of the docs directory and from the docstrings  of the public signatures of the source code. The documentation is updated and published as a Github project page   automatically as part each release.</p>"},{"location":"#releasing","title":"Releasing","text":"<p>Trigger the Draft release workflow (press Run workflow). This will update the changelog &amp; version and create a GitHub release which is in Draft state.</p> <p>Find the draft release from the GitHub releases and publish it. When  a release is published, it'll trigger release workflow which creates PyPI  release and deploys updated documentation.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>Pre-commit hooks run all the auto-formatters (e.g. <code>black</code>, <code>isort</code>), linters (e.g. <code>mypy</code>, <code>flake8</code>), and other quality  checks to make sure the changeset is in good shape before a commit/push happens.</p> <p>You can install the hooks with (runs for each commit):</p> <pre><code>pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>pre-commit install -t pre-push\n</code></pre> <p>Or if you want e.g. want to run all checks manually for all files:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>This project was generated using the wolt-python-package-cookiecutter template.</p>"},{"location":"api_docs/","title":"API documentation","text":"<p>Some parameters may appear as required. This is a bug with <code>mkdocstrings</code> (scroll down)</p>"},{"location":"api_docs/#pynoonlight.FailedRequestError","title":"<code>FailedRequestError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exception for when a request does not return the expected status code.</p>"},{"location":"api_docs/#pynoonlight.InvalidURLError","title":"<code>InvalidURLError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exception for when an invalid URL is received.</p>"},{"location":"api_docs/#pynoonlight.dispatch","title":"<code>dispatch</code>","text":"<p>The dispatch API.</p>"},{"location":"api_docs/#pynoonlight.dispatch.Address","title":"<code>Address</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Used for static alarms (e.g. a fire or a security alarm).</p> <p>Parameters:</p> Name Type Description Default <code>line1</code> <code>str</code> <p>Line 1 of the address</p> required <code>line2</code> <code>str</code> <p>Line 2 of the address. Optional.</p> required <code>city</code> <code>str</code> <p>The city where the alarm occured</p> required <code>state</code> <code>str</code> <p>The state where the alarm occured</p> required <code>zip</code> <code>str</code> <p>The ZIP code where the alarm occured</p> required"},{"location":"api_docs/#pynoonlight.dispatch.Alarm","title":"<code>Alarm(alarm_id, sandbox, owner_id, token, prod_url, session=None)</code>","text":"<p>Class for Alarms.</p> Danger <p>DO NOT INSTANTIATE THIS CLASS TO CREATE AN ALARM. USE <code>create_alarm()</code> INSTEAD.</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>def __init__(\n    self,\n    alarm_id: str,\n    sandbox: bool,\n    owner_id: str,\n    token: str,\n    prod_url: Optional[str],\n    session: Optional[aiohttp.ClientSession] = None,\n) -&gt; None:\n    self.id = alarm_id\n    self.sandbox = sandbox\n    self.owner_id = owner_id\n    self._token = token\n    self._session = session\n\n    if prod_url:\n        self.prod_url = prod_url\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.Alarm.cancel","title":"<code>cancel(pin)</code>  <code>async</code>","text":"<p>Cancel an alarm.</p> <p>Parameters:</p> Name Type Description Default <code>pin</code> <code>str</code> <p>PIN used to cancel the alarm. Optional.</p> required <p>Raises:</p> Type Description <code>FailedRequestError</code> <p>Raised when the request to cancel the alarm fails.</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>async def cancel(self, pin: Optional[str]) -&gt; None:\n\"\"\"Cancel an alarm.\n\n    Args:\n        pin (str, optional): PIN used to cancel the alarm. Optional.\n\n    Raises:\n        FailedRequestError: Raised when the request to cancel the alarm fails.\n    \"\"\"\n    if not self.active:\n        return  # Already canceled :)\n\n    url = (\n        SANDBOX_URL.format(path=f\"/{self.id}/status\")\n        if self.sandbox\n        else f\"{self.prod_url}/{self.id}/status\"\n    )\n\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {self._token}\",\n    }\n    payload = (\n        {\"status\": \"CANCELED\", \"pin\": pin}\n        if pin is not None\n        else {\"status\": \"CANCELED\"}\n    )\n\n    try:\n        await _send_request(\"POST\", url, headers, payload, 201, self._session)\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    self.active = False\n\n    return\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.Alarm.create_events","title":"<code>create_events(events)</code>  <code>async</code>","text":"<p>Create new events that started the alarm or occured during the alarm.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>list[Event]</code> <p>See Event.</p> required <p>Raises:</p> Type Description <code>FailedRequestError</code> <p>Raised when the request to create the event(s) has failed.</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>async def create_events(self, events: list[Event]) -&gt; None:\n\"\"\"Create new events that started the alarm or occured during the alarm.\n\n    Args:\n        events (list[Event]): See Event.\n\n    Raises:\n        FailedRequestError: Raised when the request to create the event(s) has failed.\n    \"\"\"\n    event_dicts: list[dict[str, Any]] = []\n    for event in events:\n        event.event_time = str(event.event_time).replace(\" \", \"T\")\n        event_dicts.append(event.model_dump())\n\n    for event_dict in event_dicts:\n        if event_dict[\"meta\"][\"device_id\"] is None:\n            del event_dict[\"meta\"][\"device_id\"]\n        if event_dict[\"meta\"][\"media\"] is None:\n            del event_dict[\"meta\"][\"media\"]\n\n    url = (\n        SANDBOX_URL.format(path=f\"/{self.id}/events\")\n        if self.sandbox\n        else f\"{self.prod_url}/{self.id}/events\"\n    )\n\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {self._token}\",\n    }\n\n    try:\n        await _send_request(\"POST\", url, headers, event_dicts, 201, self._session)\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    return\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.Alarm.create_people","title":"<code>create_people(people)</code>  <code>async</code>","text":"<p>Add new people to the alarm.</p> <p>Parameters:</p> Name Type Description Default <code>people</code> <code>list[Person]</code> <p>A list of people to add to the alarm</p> required <p>Raises:</p> Type Description <code>FailedRequestError</code> <p>Raised when the request to add the people failed.</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>async def create_people(self, people: list[Person]) -&gt; None:\n\"\"\"Add new people to the alarm.\n\n    Args:\n        people (list[Person]): A list of people to add to the alarm\n\n    Raises:\n        FailedRequestError: Raised when the request to add the people failed.\n    \"\"\"\n    people_dicts = [person.model_dump() for person in people]\n    url = (\n        SANDBOX_URL.format(path=f\"/{self.id}/people\")\n        if self.sandbox\n        else f\"{self.prod_url}/{self.id}/people\"\n    )\n\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {self._token}\",\n    }\n\n    try:\n        await _send_request(\"POST\", url, headers, people_dicts, 201, self._session)\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    return\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.Alarm.update_location","title":"<code>update_location(coordinates)</code>  <code>async</code>","text":"<p>Update the location of the alarm.</p> <p>Parameters:</p> Name Type Description Default <code>coordinates</code> <code>Coordinates</code> <p>The new coordinates of the alarm.</p> required <p>Raises:</p> Type Description <code>FailedRequestError</code> <p>Raised when the request to update the coordinates fails.</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>async def update_location(self, coordinates: Coordinates) -&gt; None:\n\"\"\"Update the location of the alarm.\n\n    Args:\n        coordinates (Coordinates): The new coordinates of the alarm.\n\n    Raises:\n        FailedRequestError: Raised when the request to update the coordinates fails.\n    \"\"\"\n    url = (\n        SANDBOX_URL.format(path=f\"/{self.id}/locations\")\n        if self.sandbox\n        else f\"{self.prod_url}/{self.id}/locations\"\n    )\n\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {self._token}\",\n    }\n    payload = coordinates.model_dump()\n\n    try:\n        await _send_request(\"POST\", url, headers, payload, 201, self._session)\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    return\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.Alarm.update_person","title":"<code>update_person(person_data)</code>  <code>async</code>","text":"<p>Update the alarm owner. You may only update the alarm owner right now.</p> <p>Parameters:</p> Name Type Description Default <code>person_data</code> <code>dict[str, Any]</code> <p>See here</p> required <p>Raises:</p> Type Description <code>FailedRequestError</code> <p>Raised when the request to update the alarm owner fails.</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>async def update_person(self, person_data: dict[str, Any]) -&gt; None:\n\"\"\"Update the alarm owner. You may only update the alarm owner right now.\n\n    Args:\n        person_data (dict[str, Any]): See [here](https://docs.noonlight.com/reference/put_alarms-alarm-id-people-person-id)\n\n    Raises:\n        FailedRequestError: Raised when the request to update the alarm owner fails.\n    \"\"\"\n    url = (\n        SANDBOX_URL.format(path=f\"/{self.id}/people/{self.owner_id}\")\n        if self.sandbox\n        else f\"{self.prod_url}/{self.id}/people/{self.owner_id}\"\n    )\n\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {self._token}\",\n    }\n\n    try:\n        await _send_request(\"PUT\", url, headers, person_data, 200, self._session)\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    return\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.AlarmData","title":"<code>AlarmData</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Alarm data passed on to Noonlight dispatchers.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the alarm owner.</p> required <code>phone</code> <code>str</code> <p>Verified phone number of the alarm owner.</p> required <code>pin</code> <code>str</code> <p>PIN used to cancel the alarm. Optional.</p> required <code>owner_id</code> <code>str</code> <p>Owner ID of the alarm, generated automatically if missing. Optional.</p> required <code>location</code> <code>Location</code> <p>Location of the alarm. This matters the most!</p> required <code>workflow</code> <code>Workflow</code> <p>See Workflow. Optional.</p> required <code>services</code> <code>Services</code> <p>See Services. Optional.</p> required <code>instructions</code> <code>Instructions</code> <p>See Instructions. Optional.</p> required"},{"location":"api_docs/#pynoonlight.dispatch.Coordinates","title":"<code>Coordinates</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Used for dynamic alarms when the user is constantly changing location.</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>float</code> <p>Latitude of the alarm</p> required <code>lon</code> <code>float</code> <p>Longitude of the alarm</p> required <code>accuracy</code> <code>int</code> <p>Accuracy of the GPS in meters</p> required"},{"location":"api_docs/#pynoonlight.dispatch.Event","title":"<code>Event</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>An event that occurs during an alarm. This could be a smoke detector being cleared, a door being opened, a water leak being detected, etc.</p> <p>Parameters:</p> Name Type Description Default <code>event_type</code> <code>str</code> <p>Must be one of 'alarm.device.activated_alarm', 'alarm.person.activated_alarm', 'alarm.device.value_changed'</p> required <code>event_time</code> <code>datetime</code> <p>The time the event occured. (if the datetime object is naive, it will be treated as if it is in local time zone)</p> required <code>meta</code> <code>EventMeta</code> <p>The metadata of the event (see EventMeta)</p> required"},{"location":"api_docs/#pynoonlight.dispatch.EventMeta","title":"<code>EventMeta</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Metadata of an event to be used in Event. See here.</p>"},{"location":"api_docs/#pynoonlight.dispatch.Instructions","title":"<code>Instructions</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>From Noonlight: Instructions relayed to the dispatchers. Currently, the only allowed type is entry.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>str</code> <p>Instructions on how to enter the area of the alarm.</p> required"},{"location":"api_docs/#pynoonlight.dispatch.Location","title":"<code>Location</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>The location of the alarm. At least one argument is required.</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>Address</code> <p>The address of the alarm.</p> required <code>coordinates</code> <code>Coordinates</code> <p>The coordinates of the alarm.</p> required"},{"location":"api_docs/#pynoonlight.dispatch.Person","title":"<code>Person</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>A person that is added to the alarm.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the person.</p> required <code>pin</code> <code>str</code> <p>Their PIN to cancel the alarm.</p> required <code>phone</code> <code>str</code> <p>The phone number of the person.</p> required"},{"location":"api_docs/#pynoonlight.dispatch.Services","title":"<code>Services</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Requested services for an alarm.</p> <pre><code>police (bool): Police requested\nfire (bool): Fire department requested\nmedical (bool): Medical personnel requested\nother (bool): Other authorities requested\n</code></pre>"},{"location":"api_docs/#pynoonlight.dispatch.Workflow","title":"<code>Workflow</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>From Noonlight: Optional workflow ID. This will be provided to you by the Noonlight team for certain use cases.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The workflow ID provided to you by the Noonlight team.</p> required"},{"location":"api_docs/#pynoonlight.dispatch.create_alarm","title":"<code>create_alarm(data, server_token, sandbox=True, client_session=None)</code>  <code>async</code>","text":"<p>Create a new alarm.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>AlarmData</code> <p>Data for the alarm. See AlarmData.</p> required <code>server_token</code> <code>str</code> <p>Your server token. Make sure it matches the sandbox or production token you have!</p> required <code>sandbox</code> <code>bool</code> <p>Set to False if this is a real alarm. Defaults to True.</p> <code>True</code> <code>prod_url</code> <code>str</code> <p>The URL of the production environment (must have https:// and must end in noonlight.com). Optional.</p> required <code>client_session</code> <code>aiohttp.ClientSession</code> <p>The client session used for requests in aiohttp</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidURLError</code> <p>Raised when the production URL provided is invalid.</p> <code>FailedRequestError</code> <p>Raised when the request to create the alarm fails</p> <p>Returns:</p> Name Type Description <code>Alarm</code> <code>Alarm</code> <p>The alarm</p> Source code in <code>pynoonlight/dispatch.py</code> <pre><code>async def create_alarm(\n    data: AlarmData,\n    server_token: str,\n    sandbox: bool = True,\n    client_session: Optional[aiohttp.ClientSession] = None,\n) -&gt; Alarm:\n\"\"\"Create a new alarm.\n\n    Args:\n        data (AlarmData): Data for the alarm. See AlarmData.\n        server_token (str): Your server token. Make sure it matches the sandbox or production token you have!\n        sandbox (bool, optional): Set to False if this is a real alarm. Defaults to True.\n        prod_url (str, optional): The URL of the production environment (must have https:// and must end in noonlight.com). Optional.\n        client_session (aiohttp.ClientSession, optional): The client session used for requests in aiohttp\n\n    Raises:\n        InvalidURLError: Raised when the production URL provided is invalid.\n        FailedRequestError: Raised when the request to create the alarm fails\n\n    Returns:\n        Alarm: The alarm\n    \"\"\"\n    if sandbox:\n        url = SANDBOX_URL.format(path=\"\")\n    else:\n        url = PRODUCTION_URL.format(path=\"\")\n\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {server_token}\",\n    }\n\n    payload = data.model_dump()\n\n    # Remove all values that are None\n    def iterate(dictionary: dict[str, Any]) -&gt; None:\n        for key, val in dictionary.copy().items():\n            if isinstance(val, dict):\n                iterate(val)\n            else:\n                if val == \"\" or val is None or val is False:\n                    del dictionary[key]\n\n    iterate(payload)\n    iterate(payload)\n\n    try:\n        response = await _send_request(\n            \"POST\", url, headers, payload, 201, client_session\n        )\n        response_data = await response.json()\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    return Alarm(\n        alarm_id=response_data[\"id\"],\n        sandbox=sandbox,\n        owner_id=response_data[\"owner_id\"],\n        token=server_token,\n        prod_url=url,\n        session=client_session,\n    )\n</code></pre>"},{"location":"api_docs/#pynoonlight.tasks","title":"<code>tasks</code>","text":"<p>The tasks API.</p>"},{"location":"api_docs/#pynoonlight.tasks.Image","title":"<code>Image</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>An image that is provided to the verifier</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image</p> required <code>media_type</code> <code>str</code> <p>The media type of the image, must be one of image/jpeg, image/png, or image/jpg</p> required <code>points_of_interest</code> <code>list[PointOfInterest]</code> <p>A list of <code>PointOfInterest</code> objects</p> required"},{"location":"api_docs/#pynoonlight.tasks.PointOfInterest","title":"<code>PointOfInterest</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>A point of interest in an image. The coordinate system for the points_of_interest field has the origin starting at the top left of the image. The positive x-axis moves right, and the positive y-axis moves down. Coordinates and distances must be non-negative integers.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>The x coordinate, in pixels, for the top left corner of the bounding box. Must be a non-negative integer.</p> required <code>dx</code> <code>int</code> <p>The distance from the x field, in pixels, for the bounding box. Must be a non-negative integer.</p> required <code>y</code> <code>int</code> <p>The y coordinate, in pixels, for the top left corner of the bounding box. Must be a non-negative integer.</p> required <code>dy</code> <code>int</code> <p>The distance from the y field, in pixels, for the bounding box. Must be a non-negative integer.</p> required"},{"location":"api_docs/#pynoonlight.tasks.VerificationData","title":"<code>VerificationData</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Data for the verifier</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the task. If not provided, it will be auto-generated.</p> required <code>owner_id</code> <code>str</code> <p>The end-user's account ID.</p> required <code>location_id</code> <code>str</code> <p>The location ID of the camera or device.</p> required <code>device_id</code> <code>str</code> <p>The device ID of the camera or device.</p> required <code>prompt</code> <code>str</code> <p>The text displayed to the verifier. They will select <code>yes</code> or <code>no</code> in response to this prompt.</p> required <code>expiration</code> <code>int</code> <p>The amount of time, in seconds, allotted to complete the verification task.</p> required <code>attachments</code> <code>Union[list[Image], Video]</code> <p>The attachment shown to the verifier.</p> required <code>webhook_url</code> <code>str</code> <p>The webhook that will be invoked when the verification is complete. If none is provided, it will use the preconfigured webhook.</p> required"},{"location":"api_docs/#pynoonlight.tasks.Video","title":"<code>Video</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>A video that is provided to the verifier</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the video</p> required <code>media_type</code> <code>str</code> <p>The media type of the video. For MP4 videos, the alllowed type is video/mp4. For HLS, use application/x-mpegURL.</p> required"},{"location":"api_docs/#pynoonlight.tasks.create_task","title":"<code>create_task(data, server_token, sandbox=True)</code>  <code>async</code>","text":"<p>Create a verification request to verify a piece of media with a prompt</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>VerificationData</code> <p>See VerificationData</p> required <code>server_token</code> <code>str</code> <p>Your server token that matches the sandbox or prod environment</p> required <code>sandbox</code> <code>bool</code> <p>Set to False if this is a real task. Defaults to True.</p> <code>True</code> <code>prod_url</code> <code>str</code> <p>URL for your production environment. Required if sandbox is set to True. Defaults to None.</p> required <p>Raises:</p> Type Description <code>FailedRequestError</code> <p>Raised when the request to create the task fails.</p> <code>InvalidURLError</code> <p>Raised when the production URL is invalid</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The task ID for the given task</p> Source code in <code>pynoonlight/tasks.py</code> <pre><code>async def create_task(\n    data: VerificationData,\n    server_token: str,\n    sandbox: bool = True,\n) -&gt; str:\n\"\"\"Create a verification request to verify a piece of media with a prompt\n\n    Args:\n        data (VerificationData): See VerificationData\n        server_token (str): Your server token that matches the sandbox or prod environment\n        sandbox (bool, optional): Set to False if this is a real task. Defaults to True.\n        prod_url (str, optional): URL for your production environment. Required if sandbox is set to True. Defaults to None.\n\n    Raises:\n        FailedRequestError: Raised when the request to create the task fails.\n        InvalidURLError: Raised when the production URL is invalid\n\n    Returns:\n        str: The task ID for the given task\n    \"\"\"\n    url = SANDBOX_URL if sandbox else PRODUCTION_URL\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {server_token}\",\n    }\n\n    payload = data.model_dump()\n    payload[\"expiration\"] = {\"timeout\": data.expiration}\n\n    try:\n        response = await _send_request(\n            \"POST\", url=url, headers=headers, payload=payload, expected_code=201\n        )\n    except RetryError as e:\n        raise FailedRequestError from e\n\n    response_data = TaskResponse(**await response.json())\n    return response_data.id\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#045-2024-12-24","title":"0.4.5 - 2024-12-24","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed field validator errors</li> </ul>"},{"location":"changelog/#044-2024-12-24","title":"0.4.4 - 2024-12-24","text":""},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Dropped support for Python 3.7</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Updated pydantic to v2</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Resolved several Dependabot alerts</li> </ul>"},{"location":"changelog/#043-2023-02-18","title":"0.4.3 - 2023-02-18","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed services typing</li> <li>Fixed create_events time parsing</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated copyright year</li> </ul>"},{"location":"changelog/#042-2023-01-22","title":"0.4.2 - 2023-01-22","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Updating dependencies, updating structure, etc.</li> </ul>"},{"location":"changelog/#041-2022-11-12","title":"0.4.1 - 2022-11-12","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Chores: update dependencies and pin actionlint</li> </ul>"},{"location":"changelog/#040-2022-10-08","title":"0.4.0 - 2022-10-08","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Use of <code>Location</code> object</li> </ul>"},{"location":"changelog/#032-2022-10-08","title":"0.3.2 - 2022-10-08","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Remove <code>None</code> values before creating alarm</li> </ul>"},{"location":"changelog/#031-2022-10-08","title":"0.3.1 - 2022-10-08","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed JSON option in <code>_send_request</code></li> </ul>"},{"location":"changelog/#030-2022-10-05","title":"0.3.0 - 2022-10-05","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Removed the need to pass a production URL to create alarms/task</li> </ul>"},{"location":"changelog/#020-2022-10-05","title":"0.2.0 - 2022-10-05","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Improve readability of README</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Migrate to <code>aiohttp</code> with the support of passing a session</li> <li>Disable socket use in tests</li> </ul>"},{"location":"changelog/#010-2022-08-22","title":"0.1.0 - 2022-08-22","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Setup initial project structure (thanks Wolt!)</li> <li>Implement dispatch API</li> <li>Add <code>codecov</code> to the test workflow</li> <li>Tweak workflow token names</li> <li>Add docstrings to <code>dispatch.py</code></li> <li>Add the test badge to <code>README</code></li> <li>Fix <code>mkdocs</code> by adding <code>show_submodules: true</code></li> <li>Convert to Google docstrings</li> <li>Add <code>dependabot</code> version updates</li> <li>Optimize <code>test</code> workflow</li> <li>Move prod URL validation and request sending to <code>__init__.py</code></li> <li>Implement tasks API</li> <li>Add tests for tasks API</li> <li>Make setting up virtual environments easier</li> </ul>"}]}